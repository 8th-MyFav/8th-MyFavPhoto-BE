// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  nickname     String
  password     String
  refreshToken String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  points            Points?
  notifications     Notifications[]
  purchaseHistories PurchaseHistories[]
  tradeHistories    TradeHistories[]
  userPhotocards    UserPhotocards[]
  photocards        Photocards[]
}

model Photocards {
  id          Int      @id @default(autoincrement())
  creator_id  Int // FK User
  name        String
  grade       Grade    @default(COMMON)
  genre       Genre    @default(KPOP)
  price       Int
  image_url   String?
  description String?
  total_count Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  creater        User             @relation(fields: [creator_id], references: [id])
  userPhotocards UserPhotocards[]
}

enum Grade {
  COMMON
  RARE
  SUPER_RARE
  LEGENDARY
}

enum Genre {
  KPOP
  ACTOR
  ESPORTS
  KBO
  ANIMATION
}

model UserPhotocards {
  id            Int      @id @default(autoincrement())
  owner_id      Int // FK user
  photocards_id Int // FK Photocards
  trade_info_id Int? // FK TradesPosts
  is_sale       Boolean
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  owner     User        @relation(fields: [owner_id], references: [id])
  photocard Photocards  @relation(fields: [photocards_id], references: [id])
  tradePost TradePosts? @relation(fields: [trade_info_id], references: [id])

  PurchaseHistories PurchaseHistories[]
  OfferedHistories  TradeHistories[]    @relation("OfferedTrades")
  TargetHistories   TradeHistories[]    @relation("TargetTrades")
}

model TradePosts {
  id          Int      @id @default(autoincrement())
  // price          Int
  trade_grade Grade    @default(COMMON)
  trade_genre Genre    @default(KPOP)
  trade_note  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  UserPhotocards UserPhotocards[] // userPhotocard
}

model TradeHistories {
  id              Int         @id @default(autoincrement())
  requester_id    Int // FK(user테이블
  offered_card_id Int //FK UserPhotocards 테이블
  target_card_id  Int //FK UserPhotocards 테이블
  trade_status    TradeStatus @default(PENDING)
  trade_content   String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // FK 관계 명시
  requester   User           @relation(fields: [requester_id], references: [id])
  offeredCard UserPhotocards @relation("OfferedTrades", fields: [offered_card_id], references: [id]) // 내 카드
  targetCard  UserPhotocards @relation("TargetTrades", fields: [target_card_id], references: [id]) // 교환 타겟 카드
}

enum TradeStatus {
  PENDING // 교환 제시중
  REJECED // 교환 거절
  COMPLETED // 교환 완료
}

model PurchaseHistories {
  id               Int      @id @default(autoincrement())
  purchaser_id     Int //FK user 테이블
  purchase_card_id Int //FK cards 테이블
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  purchaser    User           @relation(fields: [purchaser_id], references: [id])
  purchaseCard UserPhotocards @relation(fields: [purchase_card_id], references: [id])
}

model Notifications {
  id          Int                @id @default(autoincrement())
  receiver_id Int //FK user테이블
  category    NotificationStatus @default(PURCHASED)
  is_read     Boolean
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  receiver User @relation(fields: [receiver_id], references: [id])
}

enum NotificationStatus {
  PURCHASED // 구매 완료
  SOLD // 판매 완료
  SOLD_OUT // 품절
  TRADE_OFFERED // 교환 제안됨
  TRADE_ACCEPTED // 교환 성사
  TRADE_REJECTED // 교환 거절
}

model Points {
  id        Int      @id //userid임
  acc_point Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [id], references: [id])
}
